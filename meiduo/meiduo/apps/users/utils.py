from django.contrib.auth.backends import ModelBackendimport refrom itsdangerous import BadDatafrom itsdangerous import TimedJSONWebSignatureSerializer as Serializerfrom .models import Userfrom django.conf import settingsfrom . import constantsdef generate__user_token(user):    """用户修改密码的token"""    serializer = Serializer(settings.SECRET_KEY, expires_in=constants.SAVE_QQ_USER_TOKEN_EXPIRES)    data = {        "user_id": user.id,        "mobile": user.mobile,    }    token = serializer.dumps(data)    return token.decode()def check__user_token(access_token):    """用户修改密码的token"""    # 验证失败，会抛出itsdangerous.BadData异常    # 1.创建序列化对象    serializer = Serializer(secret_key=settings.SECRET_KEY,                            expires_in=constants.SAVE_QQ_USER_TOKEN_EXPIRES)  # 2.调用序列化器的loads进行解密    try:        access_token = serializer.loads(access_token)    except BadData:        return None    return access_token.get("mobile")def jwt_response_payload_handler(token, user=None, request=None):    """重写jwt登录认证方法的响应体"""    return {        'token': token,        'username': user.username,        'user_id': user.id    }def get_user_by_account(account):    """通过传入手机号或用户名动态查找user"""    # # 判断account是不是手机号    # if re.match(r'1[3-9]\d{9}', account):    #     # 表示是手机号登录    #     try:    #         user = User.objects.get(mobile=account)    #     except User.DoesNotExist:    #         return None    #    # else:    #     # 用户名登录    #     try:    #         user = User.objects.get(username=account)    #     except User.DoesNotExist:    #         return None    # zx15312345678  # 如果想要实现多账号登录用户名必须不能以数字    # 13981234567    try:        if re.match(r'1[3-9]\d{9}', account):            user = User.objects.get(mobile=account)        else:            user = User.objects.get(username=account)    except User.DoesNotExist:        return None    else:        return userclass UsernameMobileAuthBackend(ModelBackend):    """自定义django认证后端"""    def authenticate(self, request, username=None, password=None, **kwargs):        """        重写认证方式,使用多账号登录        :param request:   本次登录请求对象        :param username: 用户名/手机号        :param password: 密码        :return: 要么返回查到的user/None        """        # 1.通过传入的username 获取到user对象(通过手机号或用户名动态查询user)        user = get_user_by_account(username)        # 2.判断user的密码        if user and user.check_password(password):            return user        else:            # 3. 返回user/None            return None